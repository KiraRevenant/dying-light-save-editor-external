name: CI
on: [push, pull_request]
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      release-time: ${{ steps.output-params.outputs.release-time }}
      release-name: ${{ steps.output-params.outputs.release-name }}
    steps:
      - name: Set output parameters
        id: output-params
        run: |
          release_time=$(date --utc '+%Y%m%d%H%M%S')
          release_name=dlse-external-${release_time}
          echo "::set-output name=release-time::${release_time}"
          echo "::set-output name=release-name::${release_name}"
  build:
    name: Build (${{ matrix.config.os }}, ${{ matrix.config.compiler-id }}${{ matrix.config.compiler-version }})
    needs: setup
    runs-on: ${{ matrix.config.os }}
    # Use CMake compiler identification strings in lower-case form
    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html#variable:CMAKE_%3CLANG%3E_COMPILER_ID
    strategy:
      matrix:
        config:
          #- { os: ubuntu-latest, vcpkg-os: linux, vcpkg-triplet: x64-linux, arch: amd64, compiler-id: "gnu", compiler-version: 10, cc: /usr/bin/gcc-10, cxx: /usr/bin/g++-10 }
          #- { os: ubuntu-latest, vcpkg-os: linux, vcpkg-triplet: x64-linux, arch: amd64, compiler-id: "gnu", compiler-version: 11, cc: /usr/bin/gcc-11, cxx: /usr/bin/g++-11 }
          #- { os: ubuntu-latest, vcpkg-os: linux, vcpkg-triplet: x64-linux, arch: amd64, compiler-id: "clang", compiler-version: 11, cc: /usr/bin/clang-11, cxx: /usr/bin/clang++-11 }
          #- { os: ubuntu-latest, vcpkg-os: linux, vcpkg-triplet: x64-linux, arch: amd64, compiler-id: "clang", compiler-version: 12, cc: /usr/bin/clang-12, cxx: /usr/bin/clang++-12 }
          - { os: windows-latest, vcpkg-os: windows, vcpkg-triplet: x64-windows-static, arch: amd64, compiler-id: "msvc", compiler-version: 142 }
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vcpkg-triplet}}
    steps:
      - uses: actions/checkout@v2
      - name: Set MSVC environment variables
        if: matrix.config.compiler-id == 'msvc'
        run: echo "VCPKG_PLATFORM_TOOLSET=v${{ matrix.config.compiler-version }}" >> ${GITHUB_ENV}
        shell: bash
      - name: Create install directory
        run: mkdir --parent install
      - name: Build libraries with Docker
        if: runner.os == 'Linux'
        run: |
          docker build --tag builder .
          docker run --rm --tty --mount "type=bind,src=${PWD}/install,dst=/work/install" --env "CC=${{ matrix.config.cc }}" --env "CXX=${{ matrix.config.cxx }}" builder
      - name:
        run: (mkdir dist && cd install && zip -r "../dist/${{ needs.setup.outputs.release-name }}-${{ matrix.config.vcpkg-os }}-${{ matrix.config.compiler-id }}${{ matrix.config.compiler-version }}-${{ matrix.config.arch }}.zip" .)
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.vcpkg-os }}-${{ matrix.config.compiler-id }}${{ matrix.config.compiler-version }}-${{ matrix.config.arch }}
          path: dist/
  ghr-setup:
    name: Set up GHR
    # "setup" is only here so we can use its output parameter
    needs: [setup, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Create GH release
        run: gh release create --draft --target "${GITHUB_SHA}" "${{ needs.setup.outputs.release-name }}"
        shell: bash
  ghr-upload:
    name: Upload GHR assets
    # "setup" is only here so we can use its output parameter
    needs: [setup, ghr-setup]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Upload assets
        run: gh release upload "${{ needs.setup.outputs.release-name }}" dist/*
        shell: bash
